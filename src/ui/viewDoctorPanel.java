/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Model.Doctor;
import Model.DoctorDirectory;
import Model.Encounter;
import Model.EncounterHistory;
import Model.Patient;
import Model.PatientDirectory;
import Model.Person;
import Model.VitalSigns;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Swapnil
 */
public class viewDoctorPanel extends javax.swing.JPanel {

    EncounterHistory encounterHistory;
    PatientDirectory patientDirectory;
    Doctor loggedInDoc;
    boolean loggedIn;
    DoctorDirectory doctorDirectory;
    
    public viewDoctorPanel(EncounterHistory encounterHistory, PatientDirectory patientDirectory, DoctorDirectory doctorDirectory) {
        initComponents();
        this.encounterHistory = encounterHistory;
        this.patientDirectory = patientDirectory;
        this.doctorDirectory = doctorDirectory;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        docLoginPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        txtuserName = new javax.swing.JTextField();
        lblUserName1 = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        docWorkArea = new javax.swing.JPanel();
        patientlbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDirectory = new javax.swing.JTable();
        viewHistoryBtn = new javax.swing.JButton();
        addVitalsBtn = new javax.swing.JButton();
        lblTxtPatID = new javax.swing.JLabel();
        lblPatientID = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        btnSaveDetails = new javax.swing.JButton();
        txtTemp = new javax.swing.JTextField();
        lblPatientID1 = new javax.swing.JLabel();
        lblPatientID2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatientHistory = new javax.swing.JTable();
        lblRespiratoryRateError = new javax.swing.JLabel();
        lblBloodError = new javax.swing.JLabel();
        showDetailsBtn = new javax.swing.JButton();
        lblPatientID3 = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Doctor Login");

        lblUserName.setText("Username:");

        lblUserName1.setText("Password:");

        loginBtn.setBackground(new java.awt.Color(204, 255, 204));
        loginBtn.setText("login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout docLoginPanelLayout = new javax.swing.GroupLayout(docLoginPanel);
        docLoginPanel.setLayout(docLoginPanelLayout);
        docLoginPanelLayout.setHorizontalGroup(
            docLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(docLoginPanelLayout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addGroup(docLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(docLoginPanelLayout.createSequentialGroup()
                        .addComponent(lblUserName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(docLoginPanelLayout.createSequentialGroup()
                        .addComponent(lblUserName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginBtn))
                .addContainerGap(603, Short.MAX_VALUE))
        );
        docLoginPanelLayout.setVerticalGroup(
            docLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(docLoginPanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jLabel2)
                .addGap(51, 51, 51)
                .addGroup(docLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(docLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName1)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(loginBtn)
                .addContainerGap(190, Short.MAX_VALUE))
        );

        jLayeredPane1.add(docLoginPanel, "card2");

        patientlbl.setFont(new java.awt.Font("Didot", 1, 18)); // NOI18N
        patientlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patientlbl.setText("Patient Details");

        tblPatientDirectory.setForeground(new java.awt.Color(0, 153, 153));
        tblPatientDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Age", "City", "Community", "House Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientDirectory);

        viewHistoryBtn.setBackground(new java.awt.Color(255, 204, 51));
        viewHistoryBtn.setFont(new java.awt.Font("Didot", 1, 12)); // NOI18N
        viewHistoryBtn.setText("View History");
        viewHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryBtnActionPerformed(evt);
            }
        });

        addVitalsBtn.setBackground(new java.awt.Color(255, 204, 51));
        addVitalsBtn.setFont(new java.awt.Font("Didot", 1, 12)); // NOI18N
        addVitalsBtn.setText("Add Vitals");
        addVitalsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalsBtnActionPerformed(evt);
            }
        });

        lblTxtPatID.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblTxtPatID.setForeground(new java.awt.Color(102, 102, 102));

        lblPatientID.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblPatientID.setText("Patient ID:");

        txtBloodPressure.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtBloodPressure.setForeground(new java.awt.Color(153, 153, 0));
        txtBloodPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBloodPressureKeyReleased(evt);
            }
        });

        btnSaveDetails.setBackground(new java.awt.Color(51, 255, 255));
        btnSaveDetails.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        btnSaveDetails.setText("Save");
        btnSaveDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDetailsActionPerformed(evt);
            }
        });

        txtTemp.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtTemp.setForeground(new java.awt.Color(153, 153, 0));
        txtTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTempActionPerformed(evt);
            }
        });
        txtTemp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTempKeyReleased(evt);
            }
        });

        lblPatientID1.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblPatientID1.setText("Heart Rate:");

        lblPatientID2.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblPatientID2.setText("Blood Pressure:");

        tblPatientHistory.setBackground(new java.awt.Color(204, 255, 204));
        tblPatientHistory.setForeground(new java.awt.Color(51, 51, 0));
        tblPatientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Timestamp", "Encounter No.", "Heart Rate", "Blood Pressure", "Pulse"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatientHistory);

        lblRespiratoryRateError.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblRespiratoryRateError.setForeground(new java.awt.Color(0, 102, 0));

        lblBloodError.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblBloodError.setForeground(new java.awt.Color(0, 102, 0));

        showDetailsBtn.setBackground(new java.awt.Color(255, 153, 153));
        showDetailsBtn.setText("Show Details");
        showDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDetailsBtnActionPerformed(evt);
            }
        });

        lblPatientID3.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblPatientID3.setText("Pulse:");

        txtPulse.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtPulse.setForeground(new java.awt.Color(153, 153, 0));
        txtPulse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPulseKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout docWorkAreaLayout = new javax.swing.GroupLayout(docWorkArea);
        docWorkArea.setLayout(docWorkAreaLayout);
        docWorkAreaLayout.setHorizontalGroup(
            docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(docWorkAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(docWorkAreaLayout.createSequentialGroup()
                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, docWorkAreaLayout.createSequentialGroup()
                                .addGap(270, 270, 270)
                                .addComponent(patientlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(docWorkAreaLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(viewHistoryBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addVitalsBtn))
                            .addGroup(docWorkAreaLayout.createSequentialGroup()
                                .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(docWorkAreaLayout.createSequentialGroup()
                                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblPatientID1)
                                            .addComponent(lblPatientID2)
                                            .addComponent(lblPatientID)
                                            .addComponent(lblPatientID3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblTxtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtTemp)
                                            .addComponent(txtBloodPressure)
                                            .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblBloodError, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblRespiratoryRateError, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(docWorkAreaLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(btnSaveDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(docWorkAreaLayout.createSequentialGroup()
                .addGap(424, 424, 424)
                .addComponent(showDetailsBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        docWorkAreaLayout.setVerticalGroup(
            docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, docWorkAreaLayout.createSequentialGroup()
                .addComponent(patientlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showDetailsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVitalsBtn)
                    .addComponent(viewHistoryBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(docWorkAreaLayout.createSequentialGroup()
                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTxtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientID))
                        .addGap(10, 10, 10)
                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblPatientID1)
                                .addComponent(txtTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBloodError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPatientID2))
                            .addComponent(lblRespiratoryRateError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(docWorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientID3))
                        .addGap(30, 30, 30)
                        .addComponent(btnSaveDetails))))
        );

        jLayeredPane1.add(docWorkArea, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(941, 941, 941))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(278, 278, 278))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        String userName = txtuserName.getText();
        String password = txtPassword.getText();

        for(Doctor d: doctorDirectory.getDoctorList()){
            String uN = d.getDocUsername();
            String pW = d.getDocPassword();

            if(uN.equals(userName) && pW.equals(password)){
                loggedInDoc = d;
                loggedIn = true;
                System.out.println("login successful");
                break;
            }
        }

        if(loggedIn == true){
            switchPanels(docWorkArea);
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void viewHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));

        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        //        lblEncHisPatId.setText(Integer.toString(patient.getPatientid()));
        DefaultTableModel tblPatientHistoryModel = (DefaultTableModel) tblPatientHistory.getModel();
        tblPatientHistoryModel.setRowCount(0);
        //get filtered data
        ArrayList<Encounter> list = getFilteredData(patient.getPatientId());

        //eoc
        //for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
            for(Encounter encounter : list){
                Object[] row = new Object[5];
                row[0] = encounter;
                row[1] = encounter.getEncounterno();
                VitalSigns vitalSign = encounter.getVitalSignList().get(0);
                row[2] = vitalSign.getHeartRate();
                row[3] = vitalSign.getBloodPressure();
                row[4] = vitalSign.getPulse();
                tblPatientHistoryModel.addRow(row);
            }
    }//GEN-LAST:event_viewHistoryBtnActionPerformed

    private void addVitalsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalsBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);

        lblTxtPatID.setText(Integer.toString(patient.getPatientId()));

    }//GEN-LAST:event_addVitalsBtnActionPerformed

    private void txtBloodPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBloodPressureKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{2}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtBloodPressure.getText());
        if(!match.matches()){
            lblRespiratoryRateError.setText("Respiratory Rate Should be 2 digits");
        }else{
            lblRespiratoryRateError.setText("");
        }
    }//GEN-LAST:event_txtBloodPressureKeyReleased

    private void btnSaveDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDetailsActionPerformed
        // TODO add your handling code here:
        if(txtBloodPressure.getText()== null|| txtBloodPressure.getText().isEmpty()
            || txtTemp.getText()== null || txtTemp.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Vital Signs Cannot be Blank");

        }
        else{
            boolean patientYN;

            int encNo = 0;
            int selectedRowIndex = tblPatientDirectory.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
            System.out.println(model.getValueAt(selectedRowIndex, 0));
            Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
            patientYN = isPatientPresent(patient.getPatientId());
            System.out.println(patientYN);
            VitalSigns vitalSign = new VitalSigns();
            Encounter encounter = new Encounter();
            vitalSign.setBloodPressure(Double.parseDouble(txtBloodPressure.getText()));
            vitalSign.setHeartRate(Double.parseDouble(txtTemp.getText()));
            vitalSign.setPulse(Integer.parseInt(txtPulse.getText()));
            encounter.setTimestamp(new Date());
            // vitalSign.setRespiratoryrate(Double.parseDouble(txtRespiratoryRate.getText()));
            //  vitalSign.setBloodpressure(Double.parseDouble(txtBloodPressure.getText()));

            if(patientYN){
                encNo =  getEncNo(patient.getPatientId());
                encounter.setEncounterno(encNo+1);
            }else{
                encounter.setEncounterno(1);
            }

            encounter.setEncpatientid(patient.getPatientId());
            encounter.addVitalSign(vitalSign);
            encounterHistory.addEncounterInList(encounter);

            System.out.println(encounterHistory.getEncounterHistoryList().get(0));
            JOptionPane.showMessageDialog(this, "Vitals added Successfully!");

            txtTemp.setText("");
            txtBloodPressure.setText("");
            txtPulse.setText("");

        }
    }//GEN-LAST:event_btnSaveDetailsActionPerformed

    private void txtTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTempActionPerformed

    private void txtTempKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTempKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{2,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtTemp.getText());
        if(!match.matches()){
            lblBloodError.setText("Blood Pressure Should be 2 to 3 digits");
        }else{
            lblBloodError.setText("");
        }
    }//GEN-LAST:event_txtTempKeyReleased

    private void showDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDetailsBtnActionPerformed
        // TODO add your handling code here:
        int id = loggedInDoc.getDoctorId();
        addSearchedRowToJTable(id);

    }//GEN-LAST:event_showDetailsBtnActionPerformed

    private void txtPulseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPulseKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPulseKeyReleased

    private boolean isPatientPresent(int patientId) {
        boolean present = false;
        for(Encounter encounter : encounterHistory.getEncounterHistoryList()){
        if(encounter.getEncpatientid()== patientId){
            present = true;
        }
        else{
            present = false;
        }
        }
       return present;
    }

        private int getEncNo(int patientId) {
        ArrayList<Encounter> result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncpatientid() == patientId){
        result.add(enc);
            }
        }
        
        Encounter enc = result.get(result.size()-1);
        return enc.getEncounterno();
            
    }

    private ArrayList<Encounter> getFilteredData(int patientId) {
        ArrayList<Encounter> result = new ArrayList<Encounter>();
        for(Encounter enc : encounterHistory.getEncounterHistoryList()){
        if(enc.getEncpatientid()== patientId){
        result.add(enc);
            }
        }
        return result;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalsBtn;
    private javax.swing.JButton btnSaveDetails;
    private javax.swing.JPanel docLoginPanel;
    private javax.swing.JPanel docWorkArea;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBloodError;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblPatientID1;
    private javax.swing.JLabel lblPatientID2;
    private javax.swing.JLabel lblPatientID3;
    private javax.swing.JLabel lblRespiratoryRateError;
    private javax.swing.JLabel lblTxtPatID;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUserName1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JLabel patientlbl;
    private javax.swing.JButton showDetailsBtn;
    private javax.swing.JTable tblPatientDirectory;
    private javax.swing.JTable tblPatientHistory;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtTemp;
    private javax.swing.JTextField txtuserName;
    private javax.swing.JButton viewHistoryBtn;
    // End of variables declaration//GEN-END:variables

 private void addSearchedRowToJTable(int id) {
        
         ArrayList<Patient> empList = new ArrayList<Patient>();
         
         for(Patient p: patientDirectory.getPatientList()){
             if(id == p.getPatientDoctorId()){
                 empList.add(p);
             }
         }
        
        if(empList.isEmpty()){
            JOptionPane.showMessageDialog(this, "No patient exists.");
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        model.setRowCount(0); 
        
        for (Patient patient: empList){
        Object[] row = new Object[7];
        row[0] = patient;
        row[1] = patient.getPatientFirstName();
        row[2] = patient.getPatientLastName();
        row[3] = patient.getPatientAge();
        row[4] = patient.getPatientCity();
        row[5] = patient.getPatientCommunity();
        row[6] = patient.getPatientHouse();
        model.addRow(row);
    }
    
    }
    
     private void switchPanels(Component component) {
        jLayeredPane1.removeAll();
        jLayeredPane1.add(component);
        jLayeredPane1.revalidate();
        jLayeredPane1.repaint();
    }

}
