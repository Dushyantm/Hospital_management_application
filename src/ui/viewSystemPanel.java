/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Model.City;
import Model.Community;
import Model.CommunityDirectory;
import Model.Doctor;
import Model.DoctorDirectory;
import Model.Hospital;
import Model.HospitalDirectory;
import Model.House;
import Model.HouseDirectory;
import Model.Patient;
import Model.PatientDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import Model.Person;
import Model.PersonDirectory;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Swapnil
 */
public class viewSystemPanel extends javax.swing.JPanel {

   private JPanel contentPane;
    /**
     * Creates new form viewSystemPanel
     */
    PersonDirectory personDirectory;
    PatientDirectory patientDirectory;
    ArrayList<City> cityList;
    CommunityDirectory communityDirectory;
    HouseDirectory houseDirectory;
    HospitalDirectory hospitalDirectory;
    DoctorDirectory doctorDirectory;
    
    public viewSystemPanel(PersonDirectory personDirectory, PatientDirectory patientDirectory, ArrayList<City> cityList, 
            CommunityDirectory communityDirectory, HouseDirectory houseDirectory, HospitalDirectory hospitalDirectory
    , DoctorDirectory doctorDirectory) {
        initComponents();
        this.personDirectory = personDirectory;
        this.patientDirectory = patientDirectory;
        patientPopulateTable();
        populateTable();
        this.communityDirectory = communityDirectory;
        this.cityList = cityList;  
        this.houseDirectory = houseDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.doctorDirectory = doctorDirectory;
        populateDoctorTable();
        populateCityTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        systemLoginPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        txtuserName = new javax.swing.JTextField();
        lblUserName1 = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        systemAdminPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        personBtn = new javax.swing.JButton();
        patientBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        cityDirectoryBtn = new javax.swing.JButton();
        doctorDirectoryBtn = new javax.swing.JButton();
        personDirectoryPanel = new javax.swing.JPanel();
        personDirecLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewPersonTable = new javax.swing.JTable();
        lblFname = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        lblLname = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        btnAddPerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnSaveUpdate = new javax.swing.JButton();
        lblfname = new javax.swing.JLabel();
        lbllname = new javax.swing.JLabel();
        lblage = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        cityComboBox1 = new javax.swing.JComboBox<>();
        lblComm = new javax.swing.JLabel();
        commComboBox1 = new javax.swing.JComboBox<>();
        lblHouseNo = new javax.swing.JLabel();
        chooseHouseBox = new javax.swing.JComboBox<>();
        lblHouseNo2 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblusername = new javax.swing.JLabel();
        txtPass = new javax.swing.JTextField();
        lblHouseNo3 = new javax.swing.JLabel();
        lblpassword = new javax.swing.JLabel();
        personIdLbl = new javax.swing.JLabel();
        lblPersonId = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox<>();
        lblAge1 = new javax.swing.JLabel();
        patientDirectoryPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        backBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        btnSaveUpdate1 = new javax.swing.JButton();
        btnUpdatePerson1 = new javax.swing.JButton();
        btnDeletePerson1 = new javax.swing.JButton();
        personIdLbl1 = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        hosLbl = new javax.swing.JLabel();
        hosComboBox = new javax.swing.JComboBox<>();
        docLbl = new javax.swing.JLabel();
        docComboBox = new javax.swing.JComboBox<>();
        doctorDirectoryPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewDoctorTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        lblFname1 = new javax.swing.JLabel();
        lblDocID = new javax.swing.JLabel();
        lblLname1 = new javax.swing.JLabel();
        txtFname1 = new javax.swing.JTextField();
        lblAge2 = new javax.swing.JLabel();
        txtLname1 = new javax.swing.JTextField();
        lblComm1 = new javax.swing.JLabel();
        txtAge1 = new javax.swing.JTextField();
        hosLbl1 = new javax.swing.JLabel();
        hosComboBox1 = new javax.swing.JComboBox<>();
        backBtn2 = new javax.swing.JButton();
        btnUpdatePerson2 = new javax.swing.JButton();
        cityDirectoryPanel = new javax.swing.JPanel();
        backBtn3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        viewCityTable = new javax.swing.JTable();
        btnUpdatePerson3 = new javax.swing.JButton();
        btnSaveUpdate2 = new javax.swing.JButton();
        btnAddPerson1 = new javax.swing.JButton();
        lblFname2 = new javax.swing.JLabel();
        lblDocID1 = new javax.swing.JLabel();
        lblLname2 = new javax.swing.JLabel();
        txtFname2 = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 540));

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        systemLoginPanel.setBackground(new java.awt.Color(255, 255, 255));
        systemLoginPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("System Admin Login");

        lblUserName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUserName.setText("Username:");

        txtuserName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblUserName1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUserName1.setText("Password:");

        loginBtn.setBackground(new java.awt.Color(102, 204, 255));
        loginBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout systemLoginPanelLayout = new javax.swing.GroupLayout(systemLoginPanel);
        systemLoginPanel.setLayout(systemLoginPanelLayout);
        systemLoginPanelLayout.setHorizontalGroup(
            systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemLoginPanelLayout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addGroup(systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, systemLoginPanelLayout.createSequentialGroup()
                        .addComponent(lblUserName1)
                        .addGap(18, 18, 18)
                        .addGroup(systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginBtn)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, systemLoginPanelLayout.createSequentialGroup()
                        .addComponent(lblUserName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemLoginPanelLayout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(266, 266, 266))
        );
        systemLoginPanelLayout.setVerticalGroup(
            systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemLoginPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addGroup(systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(systemLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName1)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(loginBtn)
                .addGap(353, 353, 353))
        );

        jLayeredPane1.add(systemLoginPanel, "card5");

        systemAdminPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("System Admin");

        personBtn.setBackground(new java.awt.Color(102, 204, 255));
        personBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        personBtn.setText("Person Directory");
        personBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personBtnActionPerformed(evt);
            }
        });

        patientBtn.setBackground(new java.awt.Color(102, 204, 255));
        patientBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        patientBtn.setText("Patient Directory");
        patientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBtnActionPerformed(evt);
            }
        });

        logoutBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(255, 51, 51));
        logoutBtn.setText("<html>\n<u>Logout</u>\n</html>");
        logoutBtn.setBorderPainted(false);
        logoutBtn.setContentAreaFilled(false);
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        cityDirectoryBtn.setBackground(new java.awt.Color(102, 204, 255));
        cityDirectoryBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cityDirectoryBtn.setText("City");
        cityDirectoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityDirectoryBtnActionPerformed(evt);
            }
        });

        doctorDirectoryBtn.setBackground(new java.awt.Color(102, 204, 255));
        doctorDirectoryBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        doctorDirectoryBtn.setText("Doctor Directory");
        doctorDirectoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorDirectoryBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout systemAdminPanelLayout = new javax.swing.GroupLayout(systemAdminPanel);
        systemAdminPanel.setLayout(systemAdminPanelLayout);
        systemAdminPanelLayout.setHorizontalGroup(
            systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemAdminPanelLayout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(systemAdminPanelLayout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addGroup(systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(patientBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(personBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doctorDirectoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cityDirectoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        systemAdminPanelLayout.setVerticalGroup(
            systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(personBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(patientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(doctorDirectoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cityDirectoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(245, 245, 245))
        );

        jLayeredPane1.add(systemAdminPanel, "card2");

        personDirectoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        personDirecLbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        personDirecLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        personDirecLbl.setText("Person Directory");

        backBtn.setFont(backBtn.getFont().deriveFont(backBtn.getFont().getSize()+5f));
        backBtn.setText("↩");
        backBtn.setBorderPainted(false);
        backBtn.setContentAreaFilled(false);
        backBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn.setFocusPainted(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewPersonTable.setForeground(new java.awt.Color(51, 51, 51));
        viewPersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person Id", "First Name", "Last Name", "Gender ", "Age", "City", "Community Address", "House Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewPersonTable);

        lblFname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFname.setText("First Name:");

        txtFname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFnameKeyReleased(evt);
            }
        });

        lblLname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblLname.setText("Last Name:");

        txtLname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtLname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLnameKeyReleased(evt);
            }
        });

        lblAge.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAge.setText("Age:");

        txtAge.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAgeKeyReleased(evt);
            }
        });

        btnAddPerson.setBackground(new java.awt.Color(102, 204, 255));
        btnAddPerson.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddPerson.setText("Add Person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setBackground(new java.awt.Color(102, 204, 255));
        btnDeletePerson.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeletePerson.setText("Delete");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setBackground(new java.awt.Color(102, 204, 255));
        btnUpdatePerson.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdatePerson.setText("Update");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnSaveUpdate.setBackground(new java.awt.Color(102, 204, 255));
        btnSaveUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveUpdate.setText("Save Updates");
        btnSaveUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUpdateActionPerformed(evt);
            }
        });

        lblfname.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N

        lbllname.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N

        lblage.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N
        lblage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblageKeyReleased(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCity.setText("City:");

        cityComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York" }));
        cityComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBox1ActionPerformed(evt);
            }
        });

        lblComm.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblComm.setText("Community:");

        commComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        commComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        commComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commComboBox1ActionPerformed(evt);
            }
        });

        lblHouseNo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHouseNo.setText("House Number:");

        chooseHouseBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chooseHouseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));

        lblHouseNo2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHouseNo2.setText("Username:");

        txtUserName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserNameKeyReleased(evt);
            }
        });

        lblusername.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N

        txtPass.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPassKeyReleased(evt);
            }
        });

        lblHouseNo3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHouseNo3.setText("Password:");

        lblpassword.setFont(new java.awt.Font("Segoe UI", 2, 10)); // NOI18N

        personIdLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        personIdLbl.setText("PersonID:");

        lblPersonId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        genderComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male", "Other" }));
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });

        lblAge1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAge1.setText("Gender:");

        javax.swing.GroupLayout personDirectoryPanelLayout = new javax.swing.GroupLayout(personDirectoryPanel);
        personDirectoryPanel.setLayout(personDirectoryPanelLayout);
        personDirectoryPanelLayout.setHorizontalGroup(
            personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHouseNo2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHouseNo3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHouseNo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAge1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLname, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFname, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(personIdLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPass, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseHouseBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPersonId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                                .addGap(285, 285, 285)
                                .addComponent(btnUpdatePerson)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeletePerson))
                            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblage, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbllname, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblfname, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(lblCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lblComm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(commComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(btnAddPerson)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblusername, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(backBtn)
                        .addGap(227, 227, 227)
                        .addComponent(personDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        personDirectoryPanelLayout.setVerticalGroup(
            personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(personDirecLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personIdLbl)
                    .addComponent(btnUpdatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblfname, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFname)
                        .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblLname)
                        .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbllname, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAge)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAge1)
                        .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCity)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComm)
                    .addComponent(lblHouseNo)
                    .addComponent(chooseHouseBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblusername, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHouseNo2)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(personDirectoryPanelLayout.createSequentialGroup()
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseNo3)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(personDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLayeredPane1.add(personDirectoryPanel, "card2");

        patientDirectoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Patient Directory");

        backBtn1.setFont(backBtn1.getFont().deriveFont(backBtn1.getFont().getSize()+5f));
        backBtn1.setText("↩");
        backBtn1.setBorderPainted(false);
        backBtn1.setContentAreaFilled(false);
        backBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn1.setFocusPainted(false);
        backBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn1ActionPerformed(evt);
            }
        });

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Age", "Gender", "City", "Community Address", "House Number", "Hospital Name", "Doctor Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatient);

        btnSaveUpdate1.setBackground(new java.awt.Color(102, 204, 255));
        btnSaveUpdate1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveUpdate1.setText("Save Updates");
        btnSaveUpdate1.setMargin(new java.awt.Insets(2, 5, 3, 5));
        btnSaveUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUpdate1ActionPerformed(evt);
            }
        });

        btnUpdatePerson1.setBackground(new java.awt.Color(102, 204, 255));
        btnUpdatePerson1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdatePerson1.setText("Update");
        btnUpdatePerson1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePerson1ActionPerformed(evt);
            }
        });

        btnDeletePerson1.setBackground(new java.awt.Color(102, 204, 255));
        btnDeletePerson1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeletePerson1.setText("Delete");
        btnDeletePerson1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePerson1ActionPerformed(evt);
            }
        });

        personIdLbl1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        personIdLbl1.setText("Patient ID:");

        lblPatientId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        hosLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hosLbl.setText("Patient Hospital:");

        hosComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        hosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosComboBoxActionPerformed(evt);
            }
        });

        docLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        docLbl.setText("Patient Doctor:");

        docComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        docComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        docComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientDirectoryPanelLayout = new javax.swing.GroupLayout(patientDirectoryPanel);
        patientDirectoryPanel.setLayout(patientDirectoryPanelLayout);
        patientDirectoryPanelLayout.setHorizontalGroup(
            patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientDirectoryPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientDirectoryPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdatePerson1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeletePerson1))
                    .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                        .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                                    .addComponent(hosLbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientDirectoryPanelLayout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(docLbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(docComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(btnSaveUpdate1)))))
                            .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                                .addComponent(personIdLbl1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56))
            .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(backBtn1)
                        .addGap(222, 222, 222)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        patientDirectoryPanelLayout.setVerticalGroup(
            patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientDirectoryPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeletePerson1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdatePerson1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(personIdLbl1)
                    .addComponent(lblPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hosLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(docLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(docComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(btnSaveUpdate1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        jLayeredPane1.add(patientDirectoryPanel, "card2");

        doctorDirectoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        viewDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "First Name", "Last Name", "Age", "Hospital "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(viewDoctorTable);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Doctor Directory");

        lblFname1.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblFname1.setText("Doctor ID:");

        lblDocID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblLname1.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblLname1.setText("Doctor First Name:");

        txtFname1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFname1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFname1KeyReleased(evt);
            }
        });

        lblAge2.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblAge2.setText("Doctor Last Name:");

        txtLname1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtLname1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLname1ActionPerformed(evt);
            }
        });
        txtLname1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLname1KeyReleased(evt);
            }
        });

        lblComm1.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblComm1.setText("Doctor Age:");

        txtAge1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAge1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAge1KeyReleased(evt);
            }
        });

        hosLbl1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hosLbl1.setText("Doctor Hospital:");

        hosComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hosComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mass Hospital", "Arbour Hospital" }));
        hosComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosComboBox1ActionPerformed(evt);
            }
        });

        backBtn2.setFont(backBtn2.getFont().deriveFont(backBtn2.getFont().getSize()+5f));
        backBtn2.setText("↩");
        backBtn2.setBorderPainted(false);
        backBtn2.setContentAreaFilled(false);
        backBtn2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn2.setFocusPainted(false);
        backBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn2ActionPerformed(evt);
            }
        });

        btnUpdatePerson2.setBackground(new java.awt.Color(102, 204, 255));
        btnUpdatePerson2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdatePerson2.setText("Show Details");
        btnUpdatePerson2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePerson2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout doctorDirectoryPanelLayout = new javax.swing.GroupLayout(doctorDirectoryPanel);
        doctorDirectoryPanel.setLayout(doctorDirectoryPanelLayout);
        doctorDirectoryPanelLayout.setHorizontalGroup(
            doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(backBtn2)
                                .addGap(164, 164, 164)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorDirectoryPanelLayout.createSequentialGroup()
                                .addComponent(btnUpdatePerson2)
                                .addGap(71, 71, 71))
                            .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFname1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLname1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAge2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblComm1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(hosLbl1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hosComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAge1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtLname1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblDocID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtFname1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addGap(27, 27, 27))
        );
        doctorDirectoryPanelLayout.setVerticalGroup(
            doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorDirectoryPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn2)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdatePerson2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFname1)
                    .addComponent(lblDocID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLname1)
                    .addComponent(txtFname1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge2)
                    .addComponent(txtLname1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComm1)
                    .addComponent(txtAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctorDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hosLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hosComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        jLayeredPane1.add(doctorDirectoryPanel, "card6");

        cityDirectoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        backBtn3.setFont(backBtn3.getFont().deriveFont(backBtn3.getFont().getSize()+5f));
        backBtn3.setText("↩");
        backBtn3.setBorderPainted(false);
        backBtn3.setContentAreaFilled(false);
        backBtn3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtn3.setFocusPainted(false);
        backBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("City Directory");

        viewCityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "City ID", "City Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(viewCityTable);

        btnUpdatePerson3.setBackground(new java.awt.Color(102, 204, 255));
        btnUpdatePerson3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdatePerson3.setText("Update");
        btnUpdatePerson3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePerson3ActionPerformed(evt);
            }
        });

        btnSaveUpdate2.setBackground(new java.awt.Color(102, 204, 255));
        btnSaveUpdate2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveUpdate2.setText("Save Updates");
        btnSaveUpdate2.setMargin(new java.awt.Insets(2, 5, 3, 5));
        btnSaveUpdate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUpdate2ActionPerformed(evt);
            }
        });

        btnAddPerson1.setBackground(new java.awt.Color(102, 204, 255));
        btnAddPerson1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddPerson1.setText("Add City");
        btnAddPerson1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPerson1ActionPerformed(evt);
            }
        });

        lblFname2.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblFname2.setText("City ID:");

        lblLname2.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblLname2.setText("City Name:");

        txtFname2.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtFname2.setForeground(new java.awt.Color(153, 153, 0));
        txtFname2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFname2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout cityDirectoryPanelLayout = new javax.swing.GroupLayout(cityDirectoryPanel);
        cityDirectoryPanel.setLayout(cityDirectoryPanelLayout);
        cityDirectoryPanelLayout.setHorizontalGroup(
            cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cityDirectoryPanelLayout.createSequentialGroup()
                .addComponent(btnUpdatePerson3)
                .addGap(358, 358, 358))
            .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                                .addComponent(backBtn3)
                                .addGap(177, 177, 177)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFname2)
                            .addComponent(lblLname2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddPerson1)
                            .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblDocID1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtFname2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                        .addGap(433, 433, 433)
                        .addComponent(btnSaveUpdate2)))
                .addGap(48, 48, 48))
        );
        cityDirectoryPanelLayout.setVerticalGroup(
            cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cityDirectoryPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn3)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdatePerson3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFname2)
                    .addComponent(lblDocID1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLname2)
                    .addComponent(txtFname2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cityDirectoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPerson1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveUpdate2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );

        jLayeredPane1.add(cityDirectoryPanel, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        String userName = txtuserName.getText();
        String password = txtPassword.getText();

        if("systemAdmin".equals(userName) && "adminLogin".equals(password)){
            switchPanels(systemAdminPanel);

        }
        else{
            JOptionPane.showMessageDialog(this, "Try Again. Incorrect Id and Password.");
        }

        txtuserName.setText("");
        txtPassword.setText("");
    }//GEN-LAST:event_loginBtnActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void personBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(personDirectoryPanel);
    }//GEN-LAST:event_personBtnActionPerformed

    private void patientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(patientDirectoryPanel);
    }//GEN-LAST:event_patientBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(systemLoginPanel);
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void cityDirectoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityDirectoryBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(cityDirectoryPanel);
    }//GEN-LAST:event_cityDirectoryBtnActionPerformed

    private void doctorDirectoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorDirectoryBtnActionPerformed
        // TODO add your handling code here:
        switchPanels(doctorDirectoryPanel);
    }//GEN-LAST:event_doctorDirectoryBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        switchPanels(systemAdminPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void txtFnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtFname.getText());
        if(!match.matches()){
            lblfname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lblfname.setText("");
        }
    }//GEN-LAST:event_txtFnameKeyReleased

    private void txtLnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtLname.getText());
        if(!match.matches()){
            lbllname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lbllname.setText("");
        }

    }//GEN-LAST:event_txtLnameKeyReleased

    private void txtAgeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{0,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtAge.getText());
        if(!match.matches()){
            lblage.setText("Only Numbers and upto 3 digits are allowed");
        }else{
            lblage.setText("");
        }
    }//GEN-LAST:event_txtAgeKeyReleased

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        // TODO add your handling code here:
        if(txtAge.getText()== null || txtAge.getText().isEmpty()
            || txtFname.getText()== null || txtFname.getText().isEmpty()
            || txtLname.getText()== null || txtLname.getText().isEmpty()
        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields ! ");

        }
        else{
            Person person = new Person();
            person.setPersonAge(Integer.parseInt(txtAge.getText()));
            person.setPersonCityName((String) cityComboBox1.getSelectedItem());
            person.setPersonCommunityName((String) commComboBox1.getSelectedItem());
            person.setPersonHouseNo((String) chooseHouseBox.getSelectedItem());
            person.setFirstName(txtFname.getText());
            person.setLastName(txtLname.getText());
            person.setPersonId(getUniqueId());
            person.setGender((String) genderComboBox.getSelectedItem());
            person.setPersonUserName(txtUserName.getText());
            person.setPersonPassword(txtPass.getText());
            this.personDirectory.addNewPerson(person);
            System.out.println(personDirectory.getPersonList().get(0).toString());

            populateTable();

            JOptionPane.showMessageDialog(this, "Person Details Added Successfully");

            txtAge.setText("");
            txtFname.setText("");
            txtLname.setText("");
            txtUserName.setText("");
            txtPass.setText("");

        }
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        personDirectory.getPersonList().remove(selectedRowIndex);
        populateTable();
        JOptionPane.showMessageDialog(this, "Record Deleted Successfully!");
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = viewPersonTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Person person = (Person) model.getValueAt(selectedRowIndex , 0);
        txtAge.setText(String.valueOf(person.getPersonAge()));
        cityComboBox1.setSelectedItem(person.getPersonCityName());
        txtFname.setText(person.getFirstName());
        txtLname.setText(person.getLastName());
        chooseHouseBox.setSelectedItem(person.getPersonHouseNo());
        commComboBox1.setSelectedItem(person.getPersonCommunityName());
        lblPersonId.setText(String.valueOf(person.getPersonId()));
        txtUserName.setText(person.getPersonUserName());
        txtPass.setText(person.getPersonPassword());
        genderComboBox.setSelectedItem(person.getGender());

    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnSaveUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUpdateActionPerformed
        // TODO add your handling code here:
        if(txtAge.getText()== null || txtAge.getText().isEmpty()
            ||txtFname.getText()== null || txtFname.getText().isEmpty()
            ||txtLname.getText()== null || txtLname.getText().isEmpty()

        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields !");

        }else{
            int selectedRowIndex = viewPersonTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
            System.out.println(model.getValueAt(selectedRowIndex, 0));
            Person person = (Person) model.getValueAt(selectedRowIndex , 0);
            person.setPersonAge(Integer.parseInt(txtAge.getText()));
            person.setFirstName(txtFname.getText());
            person.setLastName(txtLname.getText());
            person.setPersonCityName((String) cityComboBox1.getSelectedItem());
            person.setPersonCommunityName((String) commComboBox1.getSelectedItem());
            person.setPersonHouseNo((String) chooseHouseBox.getSelectedItem());
            person.setGender((String) genderComboBox.getSelectedItem());
            populateTable();
            JOptionPane.showMessageDialog(this, "Record Updated Successfully!");
            txtAge.setText("");
            txtFname.setText("");
            txtLname.setText("");
            txtUserName.setText("");
            txtPass.setText("");
            lblPersonId.setText("");

        }
    }//GEN-LAST:event_btnSaveUpdateActionPerformed

    private void lblageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblageKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblageKeyReleased

    private void cityComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBox1ActionPerformed
        // TODO add your handling code here:

        String cityName = (String) cityComboBox1.getSelectedItem();

        DefaultComboBoxModel bosModel = new DefaultComboBoxModel(requiredCommunity(cityName));
        commComboBox1.setModel(bosModel);
    }//GEN-LAST:event_cityComboBox1ActionPerformed

    private void commComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commComboBox1ActionPerformed
        // TODO add your handling code here:
        String communityName = (String) commComboBox1.getSelectedItem();

        DefaultComboBoxModel hosModel = new DefaultComboBoxModel(requiredHouse(communityName));
        chooseHouseBox.setModel(hosModel);
    }//GEN-LAST:event_commComboBox1ActionPerformed

    private void txtUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyReleased
        // TODO add your handling code here:
        String username = txtUserName.getText();
        for(Person p: personDirectory.getPersonList()){
            if(username.equals(p.getPersonUserName())){
                lblusername.setText("Username already exists. Pick a new one.");
            }
            else{
                lblusername.setText("");
            }
        }
    }//GEN-LAST:event_txtUserNameKeyReleased

    private void txtPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,20}$";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtPass.getText());
        if(!match.matches()){
            lblpassword.setText("<html>Not a valid password. Password must contain at least one digit [0-9]<br/>"
                + "Password must contain at least one lowercase character [a-z] <br/>"
                + "Password must contain at least one uppercase character [A-Z] <br/>"
                + "Password must contain at least one special character like ! @ # & ( )<br/>"
                + "Password must contain a length of at least 8 characters and a maximum of 20 characters</html>"
            );
        }else{
            lblpassword.setText("");
        }
    }//GEN-LAST:event_txtPassKeyReleased

    private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderComboBoxActionPerformed

    private void backBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn1ActionPerformed
        // TODO add your handling code here:
        switchPanels(systemAdminPanel);
    }//GEN-LAST:event_backBtn1ActionPerformed

    private void btnSaveUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUpdate1ActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblPatient.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));

        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patient.setPatientHospitalName((String) hosComboBox.getSelectedItem());
        patient.setPatientDoctorName((String) docComboBox.getSelectedItem());

        patientPopulateTable();
        JOptionPane.showMessageDialog(this, "Record Updated Successfully!");
        lblPatientId.setText("");

    }//GEN-LAST:event_btnSaveUpdate1ActionPerformed

    private void btnUpdatePerson1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePerson1ActionPerformed
        // TODO add your handling code here:
        DefaultComboBoxModel hosModel = new DefaultComboBoxModel(requiredHospital());
        hosComboBox.setModel(hosModel);

        DefaultComboBoxModel docModel = new DefaultComboBoxModel(reqDoc());
        docComboBox.setModel(docModel);

        int selectedRowIndex = tblPatient.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        lblPatientId.setText(String.valueOf(patient.getPatientId()));
        hosComboBox.setSelectedItem(patient.getPatientHospitalName());
        docComboBox.setSelectedItem(patient.getPatientDoctorName());

    }//GEN-LAST:event_btnUpdatePerson1ActionPerformed

    private void btnDeletePerson1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePerson1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatient.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        patientDirectory.getPatientList().remove(selectedRowIndex);
        patientPopulateTable();
        JOptionPane.showMessageDialog(this, "Record Deleted Successfully!");
    }//GEN-LAST:event_btnDeletePerson1ActionPerformed

    private void hosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosComboBoxActionPerformed
        // TODO add your handling code here:
        String hospitalName = (String) hosComboBox.getSelectedItem();

        DefaultComboBoxModel docModel = new DefaultComboBoxModel(requiredDoctor(hospitalName));
        docComboBox.setModel(docModel);

        /*if ("Mass Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(masModel);
        } else if("Arbour Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(arbModel);
        } else if("Boston Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(boshosModel);
        } else if("Carney Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(carModel);
        } else if ("Bellevue Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(bellModel);
        } else if("Calvary Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(calModel);
        } else if("Elmhurst Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(elmModel);
        } else if("Brookdale Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(brooModel);
        }
        */
    }//GEN-LAST:event_hosComboBoxActionPerformed

    private void docComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_docComboBoxActionPerformed

    private void txtFname1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFname1KeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtFname.getText());
        if(!match.matches()){
            lblfname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lblfname.setText("");
        }
    }//GEN-LAST:event_txtFname1KeyReleased

    private void txtLname1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLname1KeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtLname.getText());
        if(!match.matches()){
            lbllname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lbllname.setText("");
        }
    }//GEN-LAST:event_txtLname1KeyReleased

    private void txtAge1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAge1KeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{0,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtAge.getText());
        if(!match.matches()){
            lblage.setText("Only Numbers and upto 3 digits are allowed");
        }else{
            lblage.setText("");
        }
    }//GEN-LAST:event_txtAge1KeyReleased

    private void hosComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosComboBox1ActionPerformed
        // TODO add your handling code here:

        /*if ("Mass Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(masModel);
        } else if("Arbour Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(arbModel);
        } else if("Boston Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(boshosModel);
        } else if("Carney Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(carModel);
        } else if ("Bellevue Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(bellModel);
        } else if("Calvary Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(calModel);
        } else if("Elmhurst Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(elmModel);
        } else if("Brookdale Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(brooModel);
        }
        */
    }//GEN-LAST:event_hosComboBox1ActionPerformed

    private void backBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn2ActionPerformed
        // TODO add your handling code here:
        switchPanels(systemAdminPanel);
    }//GEN-LAST:event_backBtn2ActionPerformed

    private void btnUpdatePerson2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePerson2ActionPerformed
        // TODO add your handling code here:
        DefaultComboBoxModel hosModel = new DefaultComboBoxModel(requiredHospital());
        hosComboBox.setModel(hosModel);

        int selectedRowIndex = viewDoctorTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewDoctorTable.getModel();

        Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex , 0);
        lblDocID.setText(String.valueOf(doctor.getDoctorId()));
        txtFname1.setText(doctor.getDoctorFirstName());
        txtLname1.setText(doctor.getDoctorLastName());
        txtAge1.setText(String.valueOf(doctor.getDoctorAge()));
        hosComboBox1.setSelectedItem(doctor.getDoctorHospital());
    }//GEN-LAST:event_btnUpdatePerson2ActionPerformed

    private void backBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn3ActionPerformed
        // TODO add your handling code here:
        switchPanels(systemAdminPanel);
    }//GEN-LAST:event_backBtn3ActionPerformed

    private void btnUpdatePerson3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePerson3ActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = viewCityTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewCityTable.getModel();

        City city = (City) model.getValueAt(selectedRowIndex , 0);
        lblDocID1.setText(String.valueOf(city.getCityId()));
        txtFname2.setText(city.getCityName());

    }//GEN-LAST:event_btnUpdatePerson3ActionPerformed

    private void btnSaveUpdate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUpdate2ActionPerformed
        // TODO add your handling code here:
        if(txtFname2.getText()== null || txtFname2.getText().isEmpty()
        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields ! ");

        }
        else{
            int selectedRowIndex = viewCityTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) viewCityTable.getModel();
            System.out.println(model.getValueAt(selectedRowIndex, 0));
            City city = (City) model.getValueAt(selectedRowIndex , 0);

            city.setCityName(txtFname2.getText());

            populateCityTable();
            JOptionPane.showMessageDialog(this, "Doctor Record Updated Successfully!");

            lblDocID1.setText("");
            txtFname2.setText("");

        }
    }//GEN-LAST:event_btnSaveUpdate2ActionPerformed

    private void btnAddPerson1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPerson1ActionPerformed
        // TODO add your handling code here:
        if( txtFname2.getText()== null || txtFname2.getText().isEmpty()

        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields ! ");

        }
        else{
            City city = new City();
            city.setCityId(getCityUniqueId());
            city.setCityName(txtFname2.getText());
            cityList.add(city);

            populateCityTable();

            // txtDocId.setText("");
            txtFname2.setText("");

            JOptionPane.showMessageDialog(this, "City Details Added Successfully");

        }
    }//GEN-LAST:event_btnAddPerson1ActionPerformed

    private void txtFname2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFname2KeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtFname.getText());
        if(!match.matches()){
            lblfname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lblfname.setText("");
        }
    }//GEN-LAST:event_txtFname2KeyReleased

    private void txtLname1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLname1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLname1ActionPerformed

private void switchPanels(Component component) {
        jLayeredPane1.removeAll();
        jLayeredPane1.add(component);
        jLayeredPane1.revalidate();
        jLayeredPane1.repaint();
    }
 
 private String[] requiredHospital(){
        
        String[] hosNames = new String[10];
        int i =0;
        
        for(Hospital hos: hospitalDirectory.getHospitalList()){
        hosNames[i] = hos.getHospitalName();
        i++;
        }
        
        return hosNames;
    }
 
  private String[] reqDoc(){
        
        String[] docNames = new String[10];
        int i =0;
        
        for(Doctor doc: doctorDirectory.getDoctorList()){
        docNames[i] = doc.getDoctorFirstName()+ " " + doc.getDoctorLastName();
        i++;
        }
        
        return docNames;
    }
 
 
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) viewPersonTable.getModel();
        model.setRowCount(0);
        for (Person person: personDirectory.getPersonList()){
        Object[] row = new Object[8];
        row[0] = person;
        row[1] = person.getFirstName();
        row[2] = person.getLastName();
        row[3] = person.getGender();
        row[4] = person.getPersonAge();
        row[5] = person.getPersonCityName();
        row[6] = person.getPersonCommunityName();
        row[7] = person.getPersonHouseNo();
        model.addRow(row);
    }
}
     private void patientPopulateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        for (Patient patient: patientDirectory.getPatientList()){
        Object[] row = new Object[10];
        row[0] = patient;
        row[1] = patient.getPatientFirstName();
        row[2] = patient.getPatientLastName();
        row[3] = patient.getPatientAge();
        row[4] = patient.getPatientGender();
        row[5] = patient.getPatientCity();
        row[6] = patient.getPatientCommunity();
        row[7] = patient.getPatientHouse();
        row[8] = patient.getPatientHospitalName();
        row[9] = patient.getPatientDoctorName();
        model.addRow(row);
    }
}  
     private void populateDoctorTable() {
        DefaultTableModel model = (DefaultTableModel) viewDoctorTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor: doctorDirectory.getDoctorList()){
        Object[] row = new Object[5];
        row[0] = doctor;
        row[1] = doctor.getDoctorFirstName();
        row[2] = doctor.getDoctorLastName();
        row[3] = doctor.getDoctorAge();
        row[4] = doctor.getDoctorHospital();
        model.addRow(row);
        }
        }
     
     private void populateCityTable() {
        DefaultTableModel model = (DefaultTableModel) viewCityTable.getModel();
        model.setRowCount(0);
        for (City city: cityList){
        Object[] row = new Object[2];
        row[0] = city;
        row[1] = city.getCityName();
        model.addRow(row);
        }
     }
     
    
    private int getUniqueId() {
        
        int randomPIN = (int)(Math.random()*90000)+10000;
        for(Person patient : personDirectory.getPersonList()){
            if(patient.getPersonId()== randomPIN){
            getUniqueId();
            }
        }
        return randomPIN;
    }
    
    private int getCityUniqueId(){
    int randomPIN = (int)(Math.random()*90000)+10000;
        for(City city: cityList){
            if(city.getCityId()== randomPIN){
            getUniqueId();
            }
        }
        return randomPIN;
    }
    
    private String[] requiredCommunity(String cityName){
        
        String[] communityNames = new String[10];
        int i =0;
        
        int cityId = 0;
        
        for(City c: cityList){
            if(c.getCityName().equals(cityName)){
                cityId = c.getCityId();
                break;
            }
        }
        
        for(Community c: communityDirectory.getCommunityList()){
            if(c.getCityID() == cityId){
                communityNames[i] = c.getCommunityAddress();
                i++;
            }
        }
        
        return communityNames;
    }
    
      private String[] requiredHouse(String communityName){
        
        String[] houseNames = new String[10];
        int i =0;
        
        int commId = 0;
        
        for(Community com: communityDirectory.getCommunityList()){
            if(com.getCommunityAddress().equals(communityName)){
                commId = com.getCommunityID();
                break;
            }
        }
        
        for(House h: houseDirectory.getHouseList()){
            if(h.getHouseCommId() == commId){
              houseNames[i] = h.getHouseName();
              i++;
            }
        }
        
        return houseNames;
    }
    
       private String[] requiredDoctor(String hospitalName){
        
        String[] doctorNames = new String[10];
        int i =0;
        
        int hosId = 0;
        
        for(Hospital hos: hospitalDirectory.getHospitalList()){
            if(hos.getHospitalName().equals(hospitalName)){
                hosId = hos.getHospitalId();
                break;
            }
        }
        
        for(Doctor doc: doctorDirectory.getDoctorList()){
            if(doc.getDoctorHosId() == hosId){
                doctorNames[i] = doc.getDoctorFirstName() + " " + doc.getDoctorLastName();
                i++;
            }
        }
        
        return doctorNames;
    }
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton backBtn1;
    private javax.swing.JButton backBtn2;
    private javax.swing.JButton backBtn3;
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnAddPerson1;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnDeletePerson1;
    private javax.swing.JButton btnSaveUpdate;
    private javax.swing.JButton btnSaveUpdate1;
    private javax.swing.JButton btnSaveUpdate2;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JButton btnUpdatePerson1;
    private javax.swing.JButton btnUpdatePerson2;
    private javax.swing.JButton btnUpdatePerson3;
    private javax.swing.JComboBox<String> chooseHouseBox;
    private javax.swing.JComboBox<String> cityComboBox1;
    private javax.swing.JButton cityDirectoryBtn;
    private javax.swing.JPanel cityDirectoryPanel;
    private javax.swing.JComboBox<String> commComboBox1;
    private javax.swing.JComboBox<String> docComboBox;
    private javax.swing.JLabel docLbl;
    private javax.swing.JButton doctorDirectoryBtn;
    private javax.swing.JPanel doctorDirectoryPanel;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JComboBox<String> hosComboBox;
    private javax.swing.JComboBox<String> hosComboBox1;
    private javax.swing.JLabel hosLbl;
    private javax.swing.JLabel hosLbl1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAge1;
    private javax.swing.JLabel lblAge2;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblComm;
    private javax.swing.JLabel lblComm1;
    private javax.swing.JLabel lblDocID;
    private javax.swing.JLabel lblDocID1;
    private javax.swing.JLabel lblFname;
    private javax.swing.JLabel lblFname1;
    private javax.swing.JLabel lblFname2;
    private javax.swing.JLabel lblHouseNo;
    private javax.swing.JLabel lblHouseNo2;
    private javax.swing.JLabel lblHouseNo3;
    private javax.swing.JLabel lblLname;
    private javax.swing.JLabel lblLname1;
    private javax.swing.JLabel lblLname2;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPersonId;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUserName1;
    private javax.swing.JLabel lblage;
    private javax.swing.JLabel lblfname;
    private javax.swing.JLabel lbllname;
    private javax.swing.JLabel lblpassword;
    private javax.swing.JLabel lblusername;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton patientBtn;
    private javax.swing.JPanel patientDirectoryPanel;
    private javax.swing.JButton personBtn;
    private javax.swing.JLabel personDirecLbl;
    private javax.swing.JPanel personDirectoryPanel;
    private javax.swing.JLabel personIdLbl;
    private javax.swing.JLabel personIdLbl1;
    private javax.swing.JPanel systemAdminPanel;
    private javax.swing.JPanel systemLoginPanel;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtAge1;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtFname1;
    private javax.swing.JTextField txtFname2;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtLname1;
    private javax.swing.JTextField txtPass;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextField txtuserName;
    private javax.swing.JTable viewCityTable;
    private javax.swing.JTable viewDoctorTable;
    private javax.swing.JTable viewPersonTable;
    // End of variables declaration//GEN-END:variables
}
