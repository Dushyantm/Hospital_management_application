/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Model.Doctor;
import Model.DoctorDirectory;
import Model.Hospital;
import Model.HospitalDirectory;
import Model.Person;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Swapnil
 */
public class viewHospitalPanel extends javax.swing.JPanel {

    DoctorDirectory doctorDirectory;
    HospitalDirectory hospitalDirectory;
    
    public viewHospitalPanel(DoctorDirectory doctorDirectory, HospitalDirectory hospitalDirectory) {
        initComponents();
        this.doctorDirectory = doctorDirectory;
        this.hospitalDirectory = hospitalDirectory;
        populateTable();
        DefaultComboBoxModel hosModel = new DefaultComboBoxModel(requiredHospital());
        hosComboBox.setModel(hosModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        hospitalAdminLogin = new javax.swing.JPanel();
        txtuserName = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        lblUserName = new javax.swing.JLabel();
        lblUserName1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        hospitalAdminWork = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewDoctorTable = new javax.swing.JTable();
        lblFname = new javax.swing.JLabel();
        lblLname = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        lblComm = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        btnAddPerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnSaveUpdate = new javax.swing.JButton();
        lblDocID = new javax.swing.JLabel();
        lblCity3 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblCity4 = new javax.swing.JLabel();
        txtPass = new javax.swing.JTextField();
        hosLbl = new javax.swing.JLabel();
        hosComboBox = new javax.swing.JComboBox<>();
        lblfname = new javax.swing.JLabel();
        lbllname = new javax.swing.JLabel();
        lblage = new javax.swing.JLabel();
        lblusername = new javax.swing.JLabel();
        lblpassword = new javax.swing.JLabel();

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        loginBtn.setBackground(new java.awt.Color(0, 204, 204));
        loginBtn.setText("login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        lblUserName.setText("Username:");

        lblUserName1.setText("Password:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hospital Admin Login");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hospitalAdminLoginLayout = new javax.swing.GroupLayout(hospitalAdminLogin);
        hospitalAdminLogin.setLayout(hospitalAdminLoginLayout);
        hospitalAdminLoginLayout.setHorizontalGroup(
            hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                        .addGroup(hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                                .addComponent(lblUserName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                                .addComponent(lblUserName1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                                        .addComponent(loginBtn)
                                        .addGap(56, 56, 56))
                                    .addComponent(txtPassword))))
                        .addGap(471, 471, 471))))
        );
        hospitalAdminLoginLayout.setVerticalGroup(
            hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalAdminLoginLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addGroup(hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtuserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hospitalAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName1)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(loginBtn)
                .addContainerGap(316, Short.MAX_VALUE))
        );

        jLayeredPane1.add(hospitalAdminLogin, "card2");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Hospital Admin");

        viewDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "First Name", "Last Name", "Age", "Hospital "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewDoctorTable);

        lblFname.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblFname.setText("Doctor ID:");

        lblLname.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblLname.setText("Doctor First Name:");

        txtFname.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtFname.setForeground(new java.awt.Color(153, 153, 0));
        txtFname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFnameKeyReleased(evt);
            }
        });

        lblAge.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblAge.setText("Doctor Last Name:");

        txtLname.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtLname.setForeground(new java.awt.Color(153, 153, 0));
        txtLname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLnameKeyReleased(evt);
            }
        });

        lblComm.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblComm.setText("Doctor Age:");

        txtAge.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtAge.setForeground(new java.awt.Color(153, 153, 0));
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAgeKeyReleased(evt);
            }
        });

        btnAddPerson.setBackground(new java.awt.Color(153, 255, 102));
        btnAddPerson.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        btnAddPerson.setText("Add Doctor");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setBackground(new java.awt.Color(255, 153, 255));
        btnUpdatePerson.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        btnUpdatePerson.setText("Update");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnSaveUpdate.setBackground(new java.awt.Color(255, 153, 255));
        btnSaveUpdate.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        btnSaveUpdate.setText("Save Updates");
        btnSaveUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUpdateActionPerformed(evt);
            }
        });

        lblCity3.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblCity3.setText("Doctor Username:");

        txtUsername.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(153, 153, 0));
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUsernameKeyReleased(evt);
            }
        });

        lblCity4.setFont(new java.awt.Font("Didot", 1, 14)); // NOI18N
        lblCity4.setText("Doctor Password:");

        txtPass.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtPass.setForeground(new java.awt.Color(153, 153, 0));
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPassKeyReleased(evt);
            }
        });

        hosLbl.setText("Doctor Hospital:");

        hosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        hosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosComboBoxActionPerformed(evt);
            }
        });

        lblfname.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblfname.setForeground(new java.awt.Color(0, 102, 102));

        lbllname.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lbllname.setForeground(new java.awt.Color(0, 102, 102));

        lblage.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblage.setForeground(new java.awt.Color(0, 102, 102));
        lblage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblageKeyReleased(evt);
            }
        });

        lblusername.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblusername.setForeground(new java.awt.Color(0, 102, 102));

        lblpassword.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        lblpassword.setForeground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout hospitalAdminWorkLayout = new javax.swing.GroupLayout(hospitalAdminWork);
        hospitalAdminWork.setLayout(hospitalAdminWorkLayout);
        hospitalAdminWorkLayout.setHorizontalGroup(
            hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospitalAdminWorkLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
            .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                            .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                                    .addComponent(lblComm)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                                    .addComponent(lblAge)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblCity3)
                                        .addComponent(hosLbl))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(hosComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblFname)
                                        .addComponent(lblLname))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblDocID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtFname, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblusername, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hospitalAdminWorkLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(lblage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hospitalAdminWorkLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(lbllname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hospitalAdminWorkLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(lblfname, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                                    .addComponent(lblCity4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnAddPerson))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdatePerson)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSaveUpdate)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hospitalAdminWorkLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hospitalAdminWorkLayout.setVerticalGroup(
            hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdatePerson)
                    .addComponent(btnSaveUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFname)
                    .addComponent(lblDocID, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                        .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLname)
                            .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAge)
                            .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblComm)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hosLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                        .addComponent(lblfname, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lbllname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lblage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCity3)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblusername, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hospitalAdminWorkLayout.createSequentialGroup()
                        .addGroup(hospitalAdminWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity4)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddPerson))
                    .addComponent(lblpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane1.add(hospitalAdminWork, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(252, 252, 252))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        String userName = txtuserName.getText();
        String password = txtPassword.getText();

        if("hospitalAdmin".equals(userName) && "adminLogin".equals(password)){
            switchPanels(hospitalAdminWork);
        }
        else{
            JOptionPane.showMessageDialog(this, "Try Again. Incorrect Id and Password.");
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtFnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtFname.getText());
        if(!match.matches()){
            lblfname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lblfname.setText("");
        }
    }//GEN-LAST:event_txtFnameKeyReleased

    private void txtLnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLnameKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[a-zA-Z]{0,50}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtLname.getText());
        if(!match.matches()){
            lbllname.setText("Name is Invalid, Please enter Valid name !");
        }else{
            lbllname.setText("");
        }
    }//GEN-LAST:event_txtLnameKeyReleased

    private void txtAgeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{0,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtAge.getText());
        if(!match.matches()){
            lblage.setText("Only Numbers and upto 3 digits are allowed");
        }else{
            lblage.setText("");
        }
    }//GEN-LAST:event_txtAgeKeyReleased

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        // TODO add your handling code here:
        if(txtLname.getText()== null || txtLname.getText().isEmpty()
            /*|| txtDocId.getText()== null || txtDocId.getText().isEmpty()*/
            || txtFname.getText()== null || txtFname.getText().isEmpty()
            || txtAge.getText()== null || txtAge.getText().isEmpty()
            || txtUsername.getText()== null || txtUsername.getText().isEmpty()
            || txtPass.getText()== null || txtPass.getText().isEmpty()
        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields ! ");

        }
        else if(userNameUnique(txtUsername.getText()) == false){
            JOptionPane.showMessageDialog(this, "This username already exists. Please choose a unique username! ");
        }
        else{
            Doctor doctor = new Doctor();
            doctor.setDoctorId(getUniqueId());
            doctor.setDoctorFirstName(txtFname.getText());
            doctor.setDoctorLastName(txtLname.getText());
            doctor.setDoctorAge(Integer.parseInt(txtAge.getText()));
            doctor.setDoctorHospital((String) hosComboBox.getSelectedItem());

            Hospital h = new Hospital();
            for(Hospital hos: hospitalDirectory.getHospitalList()){
                if(hos.getHospitalName() == hosComboBox.getSelectedItem()){
                    h = hos;
                    break;
                }
            }

            doctor.setDoctorHosId(h.getHospitalId());
            doctor.setDocUsername(txtUsername.getText());
            doctor.setDocPassword(txtPass.getText());
            this.doctorDirectory.addNewDoctor(doctor);

            populateTable();

            // txtDocId.setText("");
            txtFname.setText("");
            txtLname.setText("");
            txtAge.setText("");
            txtUsername.setText("");
            txtPass.setText("");

            {
                JOptionPane.showMessageDialog(this, "Doctor Details Added Successfully");
            }
        }
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        // TODO add your handling code here:
        DefaultComboBoxModel hosModel = new DefaultComboBoxModel(requiredHospital());
        hosComboBox.setModel(hosModel);

        int selectedRowIndex = viewDoctorTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) viewDoctorTable.getModel();

        Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex , 0);
        lblDocID.setText(String.valueOf(doctor.getDoctorId()));
        txtFname.setText(doctor.getDoctorFirstName());
        txtLname.setText(doctor.getDoctorLastName());
        txtAge.setText(String.valueOf(doctor.getDoctorAge()));
        hosComboBox.setSelectedItem(doctor.getDoctorHospital());
        txtUsername.setText(doctor.getDocUsername());
        txtPassword.setText(doctor.getDocPassword());
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnSaveUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUpdateActionPerformed
        // TODO add your handling code here:
        if(txtLname.getText()== null || txtLname.getText().isEmpty()
            || txtFname.getText()== null || txtFname.getText().isEmpty()
            || txtAge.getText()== null || txtAge.getText().isEmpty()
            || txtUsername.getText()== null || txtUsername.getText().isEmpty()
            || txtPass.getText()== null || txtPass.getText().isEmpty()
        ){
            JOptionPane.showMessageDialog(this, "Please enter all fields ! ");

        }
        else{
            int selectedRowIndex = viewDoctorTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) viewDoctorTable.getModel();
            System.out.println(model.getValueAt(selectedRowIndex, 0));
            Doctor doctor = (Doctor) model.getValueAt(selectedRowIndex , 0);

            doctor.setDoctorFirstName(txtFname.getText());
            doctor.setDoctorLastName(txtLname.getText());
            doctor.setDoctorAge(Integer.parseInt(txtAge.getText()));
            doctor.setDoctorHospital((String) hosComboBox.getSelectedItem());

            doctor.setDocUsername(txtUsername.getText());
            doctor.setDocPassword(txtPass.getText());

            populateTable();
            JOptionPane.showMessageDialog(this, "Doctor Record Updated Successfully!");
            lblDocID.setText("");
            txtFname.setText("");
            txtLname.setText("");
            txtAge.setText("");
            txtUsername.setText("");
            txtPass.setText("");

        }
    }//GEN-LAST:event_btnSaveUpdateActionPerformed

    private void txtUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyReleased
        // TODO add your handling code here:
        String username = txtUsername.getText();
        for(Doctor doc: doctorDirectory.getDoctorList()){
            if(username.equals(doc.getDocUsername())){
                lblusername.setText("Username already exists. Pick a new one.");
            }
            else{
                lblusername.setText("");
            }
        }
    }//GEN-LAST:event_txtUsernameKeyReleased

    private void txtPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyReleased
        // TODO add your handling code here:
        String PATTERN = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,20}$";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtPass.getText());
        if(!match.matches()){
            lblpassword.setText("<html>Not a valid password. Password must contain at least one digit [0-9]<br/>"
                + "Password must contain at least one lowercase character [a-z] <br/>"
                + "Password must contain at least one uppercase character [A-Z] <br/>"
                + "Password must contain at least one special character like ! @ # & ( )<br/>"
                + "Password must contain a length of at least 8 characters and a maximum of 20 characters</html>"
            );
        }else{
            lblpassword.setText("");
        }
    }//GEN-LAST:event_txtPassKeyReleased

    private void hosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosComboBoxActionPerformed
        // TODO add your handling code here:

        /*if ("Mass Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(masModel);
        } else if("Arbour Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(arbModel);
        } else if("Boston Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(boshosModel);
        } else if("Carney Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(carModel);
        } else if ("Bellevue Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(bellModel);
        } else if("Calvary Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(calModel);
        } else if("Elmhurst Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(elmModel);
        } else if("Brookdale Hospital".equals(hosComboBox.getSelectedItem())){
            docComboBox.setModel(brooModel);
        }
        */
    }//GEN-LAST:event_hosComboBoxActionPerformed

    private void lblageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblageKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblageKeyReleased

private boolean userNameUnique(String username){
    
    boolean unique = false;
     
        for(Doctor doc: doctorDirectory.getDoctorList()){
            if(username.equals(doc.getDocUsername())){
               unique = false;
               break;
            }
            else{
                unique = true;
            }
        }

    return unique;
}
    
private void switchPanels(Component component) {
        jLayeredPane1.removeAll();
        jLayeredPane1.add(component);
        jLayeredPane1.revalidate();
        jLayeredPane1.repaint();
    }

    private int getUniqueId() {
        
        int randomPIN = (int)(Math.random()*90000)+10000;
        for(Doctor doctor : doctorDirectory.getDoctorList()){
            if(doctor.getDoctorId()== randomPIN){
            getUniqueId();
            }
        }
        return randomPIN;
    }
    
        private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) viewDoctorTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor: doctorDirectory.getDoctorList()){
        Object[] row = new Object[5];
        row[0] = doctor;
        row[1] = doctor.getDoctorFirstName();
        row[2] = doctor.getDoctorLastName();
        row[3] = doctor.getDoctorAge();
        row[4] = doctor.getDoctorHospital();
        model.addRow(row);
        }
        }
        
         private String[] requiredHospital(){
        
        String[] hosNames = new String[10];
        int i =0;
        
        for(Hospital hos: hospitalDirectory.getHospitalList()){
        hosNames[i] = hos.getHospitalName();
        i++;
        }
        
        return hosNames;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnSaveUpdate;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JComboBox<String> hosComboBox;
    private javax.swing.JLabel hosLbl;
    private javax.swing.JPanel hospitalAdminLogin;
    private javax.swing.JPanel hospitalAdminWork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity3;
    private javax.swing.JLabel lblCity4;
    private javax.swing.JLabel lblComm;
    private javax.swing.JLabel lblDocID;
    private javax.swing.JLabel lblFname;
    private javax.swing.JLabel lblLname;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUserName1;
    private javax.swing.JLabel lblage;
    private javax.swing.JLabel lblfname;
    private javax.swing.JLabel lbllname;
    private javax.swing.JLabel lblpassword;
    private javax.swing.JLabel lblusername;
    private javax.swing.JButton loginBtn;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtPass;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtuserName;
    private javax.swing.JTable viewDoctorTable;
    // End of variables declaration//GEN-END:variables
}
